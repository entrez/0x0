#!/usr/bin/env bash
# vim:et:sw=4:ts=4:fenc=utf-8:tw=78
# 0x0: quickly upload to 0x0.st (and get nonce)

do_request() {
    result="$(curl -vs -F"$1" https://0x0.st 2>"$2")"
    exitcode=$?
    awk <"$2" '/x-token:/ { print $4 }' >&2
    echo "$result"
    return $exitcode
}

show_help() {
    echo "usage: 0x0 <file_path_or_url> [<file_path_or_url_2> ...]" >&2
    echo "       echo hello there | 0x0" >&2
}

normalize_url() {
    target="$1"
    domain="$(sed -nE 's/^(.*:\/\/)?([^\/]*).*/\2/p' <<<"$target")"
    numparts="$(awk -F. '{print NF-1}' <<<"$domain")"
    if [ "$numparts" -lt 2 ]; then
        protocol="$(sed -nE 's!^([^:/?#]+)://.*!\1!p' <<<"$target")"
        target="$protocol://www.${target#*://}"
    fi
    [[ ${target%%:*} =~ ^https?$ ]] || target="http://${target#*://}"
    printf '%s' "$target" 
}

if [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
    show_help
    exit 0
fi

output=$(mktemp)
if [ -z "$1" ]; then
    do_request 'file=@-' "$output"
    exit "$?"
else
    error=0
    while [ "$#" -gt 0 ]; do
        if [ -f "$1" ]; then
            do_request "file=@$1" "$output"
            err="$?"
            [ "$err" -ne 0 ] && error="$err"
        else 
            target=$(normalize_url "$1")
            useragent=("User-Agent: Mozilla/5.0"
                       "(Macintosh; Intel Mac OS X 10.15; rv:95.0)"
                       "Gecko/20100101 Firefox/95.0")
            if curl -A"${useragent[*]}" -fsIL "$target" &>/dev/null
            then
                do_request "url=$target" "$output"
                err="$?"
                [ "$err" -ne 0 ] && error="$err"
            else
                echo "error: not a valid uri or file: $1" >&2
                error=1
            fi
        fi
        shift
    done
fi
